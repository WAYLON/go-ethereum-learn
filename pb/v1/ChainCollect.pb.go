// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.9
// source: v1/pbfile/ChainCollect.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParseDataTypeEnum int32

const (
	ParseDataTypeEnum_ParseDataTypeEnum_Function ParseDataTypeEnum = 0
	ParseDataTypeEnum_ParseDataTypeEnum_Event    ParseDataTypeEnum = 1
	ParseDataTypeEnum_ParseDataTypeEnum_Error    ParseDataTypeEnum = 2
)

// Enum value maps for ParseDataTypeEnum.
var (
	ParseDataTypeEnum_name = map[int32]string{
		0: "ParseDataTypeEnum_Function",
		1: "ParseDataTypeEnum_Event",
		2: "ParseDataTypeEnum_Error",
	}
	ParseDataTypeEnum_value = map[string]int32{
		"ParseDataTypeEnum_Function": 0,
		"ParseDataTypeEnum_Event":    1,
		"ParseDataTypeEnum_Error":    2,
	}
)

func (x ParseDataTypeEnum) Enum() *ParseDataTypeEnum {
	p := new(ParseDataTypeEnum)
	*p = x
	return p
}

func (x ParseDataTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParseDataTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[0].Descriptor()
}

func (ParseDataTypeEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[0]
}

func (x ParseDataTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParseDataTypeEnum.Descriptor instead.
func (ParseDataTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{0}
}

type FilterSetStatusEnum int32

const (
	FilterSetStatusEnum_FilterSetStatusEnum_UNKNOWN FilterSetStatusEnum = 0
	// 成功
	FilterSetStatusEnum_FilterSetStatusEnum_Success FilterSetStatusEnum = 1
	// 失败 不存在key
	FilterSetStatusEnum_FilterSetStatusEnum_Key_Not_Exist FilterSetStatusEnum = 2
)

// Enum value maps for FilterSetStatusEnum.
var (
	FilterSetStatusEnum_name = map[int32]string{
		0: "FilterSetStatusEnum_UNKNOWN",
		1: "FilterSetStatusEnum_Success",
		2: "FilterSetStatusEnum_Key_Not_Exist",
	}
	FilterSetStatusEnum_value = map[string]int32{
		"FilterSetStatusEnum_UNKNOWN":       0,
		"FilterSetStatusEnum_Success":       1,
		"FilterSetStatusEnum_Key_Not_Exist": 2,
	}
)

func (x FilterSetStatusEnum) Enum() *FilterSetStatusEnum {
	p := new(FilterSetStatusEnum)
	*p = x
	return p
}

func (x FilterSetStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterSetStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[1].Descriptor()
}

func (FilterSetStatusEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[1]
}

func (x FilterSetStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterSetStatusEnum.Descriptor instead.
func (FilterSetStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{1}
}

type BlockStatusEnum int32

const (
	BlockStatusEnum_BlockStatusEnum_UNKNOWN BlockStatusEnum = 0
	// 正常
	BlockStatusEnum_BlockStatusEnum_Normal BlockStatusEnum = 1
	// 回滚
	BlockStatusEnum_BlockStatusEnum_Rollback BlockStatusEnum = 2
)

// Enum value maps for BlockStatusEnum.
var (
	BlockStatusEnum_name = map[int32]string{
		0: "BlockStatusEnum_UNKNOWN",
		1: "BlockStatusEnum_Normal",
		2: "BlockStatusEnum_Rollback",
	}
	BlockStatusEnum_value = map[string]int32{
		"BlockStatusEnum_UNKNOWN":  0,
		"BlockStatusEnum_Normal":   1,
		"BlockStatusEnum_Rollback": 2,
	}
)

func (x BlockStatusEnum) Enum() *BlockStatusEnum {
	p := new(BlockStatusEnum)
	*p = x
	return p
}

func (x BlockStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[2].Descriptor()
}

func (BlockStatusEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[2]
}

func (x BlockStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStatusEnum.Descriptor instead.
func (BlockStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{2}
}

type EventStatusEnum int32

const (
	EventStatusEnum_EventStatusEnum_UNKNOWN EventStatusEnum = 0
	// 正常
	EventStatusEnum_EventStatusEnum_Normal EventStatusEnum = 1
	// 回滚
	EventStatusEnum_EventStatusEnum_Rollback EventStatusEnum = 2
)

// Enum value maps for EventStatusEnum.
var (
	EventStatusEnum_name = map[int32]string{
		0: "EventStatusEnum_UNKNOWN",
		1: "EventStatusEnum_Normal",
		2: "EventStatusEnum_Rollback",
	}
	EventStatusEnum_value = map[string]int32{
		"EventStatusEnum_UNKNOWN":  0,
		"EventStatusEnum_Normal":   1,
		"EventStatusEnum_Rollback": 2,
	}
)

func (x EventStatusEnum) Enum() *EventStatusEnum {
	p := new(EventStatusEnum)
	*p = x
	return p
}

func (x EventStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[3].Descriptor()
}

func (EventStatusEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[3]
}

func (x EventStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatusEnum.Descriptor instead.
func (EventStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{3}
}

type TransactionStatusEnum int32

const (
	TransactionStatusEnum_TransactionStatusEnum__UNKNOWN TransactionStatusEnum = 0
	// 成功
	TransactionStatusEnum_TransactionStatusEnum_Success TransactionStatusEnum = 1
	// 失败
	TransactionStatusEnum_TransactionStatusEnum_Fail TransactionStatusEnum = 2
	// 回滚
	TransactionStatusEnum_TransactionStatusEnum_Rollback TransactionStatusEnum = 3
)

// Enum value maps for TransactionStatusEnum.
var (
	TransactionStatusEnum_name = map[int32]string{
		0: "TransactionStatusEnum__UNKNOWN",
		1: "TransactionStatusEnum_Success",
		2: "TransactionStatusEnum_Fail",
		3: "TransactionStatusEnum_Rollback",
	}
	TransactionStatusEnum_value = map[string]int32{
		"TransactionStatusEnum__UNKNOWN": 0,
		"TransactionStatusEnum_Success":  1,
		"TransactionStatusEnum_Fail":     2,
		"TransactionStatusEnum_Rollback": 3,
	}
)

func (x TransactionStatusEnum) Enum() *TransactionStatusEnum {
	p := new(TransactionStatusEnum)
	*p = x
	return p
}

func (x TransactionStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[4].Descriptor()
}

func (TransactionStatusEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[4]
}

func (x TransactionStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatusEnum.Descriptor instead.
func (TransactionStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{4}
}

type TransactionTypeEnum int32

const (
	TransactionTypeEnum_TransactionTypeEnum_UNKNOWN TransactionTypeEnum = 0
	// 伦敦协议交易
	TransactionTypeEnum_TransactionTypeEnum_London TransactionTypeEnum = 1
	// 普通交易
	TransactionTypeEnum_TransactionTypeEnum_Normal TransactionTypeEnum = 2
)

// Enum value maps for TransactionTypeEnum.
var (
	TransactionTypeEnum_name = map[int32]string{
		0: "TransactionTypeEnum_UNKNOWN",
		1: "TransactionTypeEnum_London",
		2: "TransactionTypeEnum_Normal",
	}
	TransactionTypeEnum_value = map[string]int32{
		"TransactionTypeEnum_UNKNOWN": 0,
		"TransactionTypeEnum_London":  1,
		"TransactionTypeEnum_Normal":  2,
	}
)

func (x TransactionTypeEnum) Enum() *TransactionTypeEnum {
	p := new(TransactionTypeEnum)
	*p = x
	return p
}

func (x TransactionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[5].Descriptor()
}

func (TransactionTypeEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[5]
}

func (x TransactionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionTypeEnum.Descriptor instead.
func (TransactionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{5}
}

type EventTypeEnum int32

const (
	EventTypeEnum_EventTypeEnum_UNKNOWN EventTypeEnum = 0
	// 自生成事件
	EventTypeEnum_EventTypeEnum_Self_Generated EventTypeEnum = 1
	// 链上事件
	EventTypeEnum_EventTypeEnum_Chain EventTypeEnum = 2
)

// Enum value maps for EventTypeEnum.
var (
	EventTypeEnum_name = map[int32]string{
		0: "EventTypeEnum_UNKNOWN",
		1: "EventTypeEnum_Self_Generated",
		2: "EventTypeEnum_Chain",
	}
	EventTypeEnum_value = map[string]int32{
		"EventTypeEnum_UNKNOWN":        0,
		"EventTypeEnum_Self_Generated": 1,
		"EventTypeEnum_Chain":          2,
	}
)

func (x EventTypeEnum) Enum() *EventTypeEnum {
	p := new(EventTypeEnum)
	*p = x
	return p
}

func (x EventTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pbfile_ChainCollect_proto_enumTypes[6].Descriptor()
}

func (EventTypeEnum) Type() protoreflect.EnumType {
	return &file_v1_pbfile_ChainCollect_proto_enumTypes[6]
}

func (x EventTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTypeEnum.Descriptor instead.
func (EventTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{6}
}

type ParseDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ParseDataTypeEnum `protobuf:"varint,1,opt,name=Type,proto3,enum=ChainCollect.ParseDataTypeEnum" json:"Type,omitempty"`
	// 仅解析topic时需要传递
	Topic0 string `protobuf:"bytes,2,opt,name=Topic0,proto3" json:"Topic0,omitempty"`
	Topic1 string `protobuf:"bytes,3,opt,name=Topic1,proto3" json:"Topic1,omitempty"`
	Topic2 string `protobuf:"bytes,4,opt,name=Topic2,proto3" json:"Topic2,omitempty"`
	Topic3 string `protobuf:"bytes,5,opt,name=Topic3,proto3" json:"Topic3,omitempty"`
	Data   string `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ParseDataReq) Reset() {
	*x = ParseDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseDataReq) ProtoMessage() {}

func (x *ParseDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseDataReq.ProtoReflect.Descriptor instead.
func (*ParseDataReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{0}
}

func (x *ParseDataReq) GetType() ParseDataTypeEnum {
	if x != nil {
		return x.Type
	}
	return ParseDataTypeEnum_ParseDataTypeEnum_Function
}

func (x *ParseDataReq) GetTopic0() string {
	if x != nil {
		return x.Topic0
	}
	return ""
}

func (x *ParseDataReq) GetTopic1() string {
	if x != nil {
		return x.Topic1
	}
	return ""
}

func (x *ParseDataReq) GetTopic2() string {
	if x != nil {
		return x.Topic2
	}
	return ""
}

func (x *ParseDataReq) GetTopic3() string {
	if x != nil {
		return x.Topic3
	}
	return ""
}

func (x *ParseDataReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ParseDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ParseDataResp_ABIFunctionDetail
	//	*ParseDataResp_ABIEventDetail
	//	*ParseDataResp_ABIErrorDetail
	Value isParseDataResp_Value `protobuf_oneof:"value"`
}

func (x *ParseDataResp) Reset() {
	*x = ParseDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseDataResp) ProtoMessage() {}

func (x *ParseDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseDataResp.ProtoReflect.Descriptor instead.
func (*ParseDataResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{1}
}

func (m *ParseDataResp) GetValue() isParseDataResp_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ParseDataResp) GetABIFunctionDetail() *ABIFunctionDetail {
	if x, ok := x.GetValue().(*ParseDataResp_ABIFunctionDetail); ok {
		return x.ABIFunctionDetail
	}
	return nil
}

func (x *ParseDataResp) GetABIEventDetail() *ABIEventDetail {
	if x, ok := x.GetValue().(*ParseDataResp_ABIEventDetail); ok {
		return x.ABIEventDetail
	}
	return nil
}

func (x *ParseDataResp) GetABIErrorDetail() *ABIErrorDetail {
	if x, ok := x.GetValue().(*ParseDataResp_ABIErrorDetail); ok {
		return x.ABIErrorDetail
	}
	return nil
}

type isParseDataResp_Value interface {
	isParseDataResp_Value()
}

type ParseDataResp_ABIFunctionDetail struct {
	ABIFunctionDetail *ABIFunctionDetail `protobuf:"bytes,1,opt,name=ABIFunctionDetail,proto3,oneof"`
}

type ParseDataResp_ABIEventDetail struct {
	ABIEventDetail *ABIEventDetail `protobuf:"bytes,2,opt,name=ABIEventDetail,proto3,oneof"`
}

type ParseDataResp_ABIErrorDetail struct {
	ABIErrorDetail *ABIErrorDetail `protobuf:"bytes,3,opt,name=ABIErrorDetail,proto3,oneof"`
}

func (*ParseDataResp_ABIFunctionDetail) isParseDataResp_Value() {}

func (*ParseDataResp_ABIEventDetail) isParseDataResp_Value() {}

func (*ParseDataResp_ABIErrorDetail) isParseDataResp_Value() {}

type StorageAbiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *StorageAbiReq) Reset() {
	*x = StorageAbiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageAbiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageAbiReq) ProtoMessage() {}

func (x *StorageAbiReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageAbiReq.ProtoReflect.Descriptor instead.
func (*StorageAbiReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{2}
}

func (x *StorageAbiReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageAbiReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type FilterSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 约定好的 每个集合对应唯一key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 集合元素
	Set []string `protobuf:"bytes,2,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *FilterSetReq) Reset() {
	*x = FilterSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSetReq) ProtoMessage() {}

func (x *FilterSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSetReq.ProtoReflect.Descriptor instead.
func (*FilterSetReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{3}
}

func (x *FilterSetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FilterSetReq) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

type FilterSetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status FilterSetStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=ChainCollect.FilterSetStatusEnum" json:"status,omitempty"`
	Update bool                `protobuf:"varint,2,opt,name=Update,proto3" json:"Update,omitempty"`
}

func (x *FilterSetResp) Reset() {
	*x = FilterSetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSetResp) ProtoMessage() {}

func (x *FilterSetResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSetResp.ProtoReflect.Descriptor instead.
func (*FilterSetResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{4}
}

func (x *FilterSetResp) GetStatus() FilterSetStatusEnum {
	if x != nil {
		return x.Status
	}
	return FilterSetStatusEnum_FilterSetStatusEnum_UNKNOWN
}

func (x *FilterSetResp) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

// no need return.
type NoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoResp) Reset() {
	*x = NoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoResp) ProtoMessage() {}

func (x *NoResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoResp.ProtoReflect.Descriptor instead.
func (*NoResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{5}
}

// no param.
type NoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoReq) Reset() {
	*x = NoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoReq) ProtoMessage() {}

func (x *NoReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoReq.ProtoReflect.Descriptor instead.
func (*NoReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{6}
}

type GetBlocksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageInfo *PageInfoReq `protobuf:"bytes,1,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
	// 区块 以下所有范围查找均为左闭右闭.
	// 开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 起始高度
	StartNumber int64 `protobuf:"varint,4,opt,name=StartNumber,proto3" json:"StartNumber,omitempty"`
	// 结束高度
	EndNumber int64 `protobuf:"varint,5,opt,name=EndNumber,proto3" json:"EndNumber,omitempty"`
	// 矿工地址 (举例 "0xFcD1aef048EaA60cD07076f27FC6E4C4c642BC01" 以下地址同理).
	Miner string `protobuf:"bytes,6,opt,name=Miner,proto3" json:"Miner,omitempty"`
	// 区块状态(不存在的状态会直接返回错误、以下枚举同理).
	Status BlockStatusEnum `protobuf:"varint,7,opt,name=Status,proto3,enum=ChainCollect.BlockStatusEnum" json:"Status,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,8,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (x *GetBlocksReq) Reset() {
	*x = GetBlocksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksReq) ProtoMessage() {}

func (x *GetBlocksReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksReq.ProtoReflect.Descriptor instead.
func (*GetBlocksReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlocksReq) GetPageInfo() *PageInfoReq {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetBlocksReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetBlocksReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetBlocksReq) GetStartNumber() int64 {
	if x != nil {
		return x.StartNumber
	}
	return 0
}

func (x *GetBlocksReq) GetEndNumber() int64 {
	if x != nil {
		return x.EndNumber
	}
	return 0
}

func (x *GetBlocksReq) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *GetBlocksReq) GetStatus() BlockStatusEnum {
	if x != nil {
		return x.Status
	}
	return BlockStatusEnum_BlockStatusEnum_UNKNOWN
}

func (x *GetBlocksReq) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type GetBlocksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockInfo `protobuf:"bytes,2,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *GetBlocksResp) Reset() {
	*x = GetBlocksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResp) ProtoMessage() {}

func (x *GetBlocksResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResp.ProtoReflect.Descriptor instead.
func (*GetBlocksResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlocksResp) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetTransactionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageInfo *PageInfoReq `protobuf:"bytes,1,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
	// 交易
	// 开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 发起地址
	From string `protobuf:"bytes,4,opt,name=From,proto3" json:"From,omitempty"`
	// 接收地址(合约地址).
	To string `protobuf:"bytes,5,opt,name=To,proto3" json:"To,omitempty"`
	// 交易状态：成功、失败、回滚.
	Status TransactionStatusEnum `protobuf:"varint,6,opt,name=Status,proto3,enum=ChainCollect.TransactionStatusEnum" json:"Status,omitempty"`
	// 交易类型：伦敦协议交易、普通交易.
	Type TransactionTypeEnum `protobuf:"varint,7,opt,name=Type,proto3,enum=ChainCollect.TransactionTypeEnum" json:"Type,omitempty"`
	// 交易nonce
	Nonce int64 `protobuf:"varint,8,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// 交易hash (举例 "0x39c0084e11f4414c8bc4c7b98a43b7f7191624270a4874c78df2bca1809a612e" 以下hash同理 ).
	Hash string `protobuf:"bytes,9,opt,name=Hash,proto3" json:"Hash,omitempty"`
	// 区块
	// 区块id
	BlockId string `protobuf:"bytes,10,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	// 区块hash
	BlockHash string `protobuf:"bytes,11,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	// 起始高度
	StartBlockNumber int64 `protobuf:"varint,12,opt,name=StartBlockNumber,proto3" json:"StartBlockNumber,omitempty"`
	// 结束高度
	EndBlockNumber int64 `protobuf:"varint,13,opt,name=EndBlockNumber,proto3" json:"EndBlockNumber,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,14,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (x *GetTransactionsReq) Reset() {
	*x = GetTransactionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsReq) ProtoMessage() {}

func (x *GetTransactionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsReq.ProtoReflect.Descriptor instead.
func (*GetTransactionsReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{9}
}

func (x *GetTransactionsReq) GetPageInfo() *PageInfoReq {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetTransactionsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTransactionsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTransactionsReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetTransactionsReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetTransactionsReq) GetStatus() TransactionStatusEnum {
	if x != nil {
		return x.Status
	}
	return TransactionStatusEnum_TransactionStatusEnum__UNKNOWN
}

func (x *GetTransactionsReq) GetType() TransactionTypeEnum {
	if x != nil {
		return x.Type
	}
	return TransactionTypeEnum_TransactionTypeEnum_UNKNOWN
}

func (x *GetTransactionsReq) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetTransactionsReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetTransactionsReq) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *GetTransactionsReq) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetTransactionsReq) GetStartBlockNumber() int64 {
	if x != nil {
		return x.StartBlockNumber
	}
	return 0
}

func (x *GetTransactionsReq) GetEndBlockNumber() int64 {
	if x != nil {
		return x.EndBlockNumber
	}
	return 0
}

func (x *GetTransactionsReq) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type GetTransactionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionInfo `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *GetTransactionsResp) Reset() {
	*x = GetTransactionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsResp) ProtoMessage() {}

func (x *GetTransactionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsResp.ProtoReflect.Descriptor instead.
func (*GetTransactionsResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{10}
}

func (x *GetTransactionsResp) GetTransactions() []*TransactionInfo {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetEventsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页
	PageInfo *PageInfoReq `protobuf:"bytes,1,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
	// 事件
	// 开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 事件类型
	Type EventTypeEnum `protobuf:"varint,4,opt,name=Type,proto3,enum=ChainCollect.EventTypeEnum" json:"Type,omitempty"`
	// topic(对应事件的函数签名的hash及参数等).
	Topic0   string `protobuf:"bytes,5,opt,name=Topic0,proto3" json:"Topic0,omitempty"`
	Topic1   string `protobuf:"bytes,6,opt,name=Topic1,proto3" json:"Topic1,omitempty"`
	Topic2   string `protobuf:"bytes,7,opt,name=Topic2,proto3" json:"Topic2,omitempty"`
	Topic3   string `protobuf:"bytes,8,opt,name=Topic3,proto3" json:"Topic3,omitempty"`
	Contract string `protobuf:"bytes,9,opt,name=Contract,proto3" json:"Contract,omitempty"`
	// 交易
	// 交易Id
	TransactionId string `protobuf:"bytes,10,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	// 交易Hash
	TransactionHash string `protobuf:"bytes,11,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	// 交易发起地址
	TransactionFrom string `protobuf:"bytes,12,opt,name=TransactionFrom,proto3" json:"TransactionFrom,omitempty"`
	// 交易接收地址(合约地址\接收人地址).
	TransactionTo string `protobuf:"bytes,13,opt,name=TransactionTo,proto3" json:"TransactionTo,omitempty"`
	// 区块
	// 区块id
	BlockId string `protobuf:"bytes,14,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	// 区块hash
	BlockHash string `protobuf:"bytes,15,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	// 起始高度
	StartBlockNumber int64 `protobuf:"varint,16,opt,name=StartBlockNumber,proto3" json:"StartBlockNumber,omitempty"`
	// 结束高度
	EndBlockNumber int64 `protobuf:"varint,17,opt,name=EndBlockNumber,proto3" json:"EndBlockNumber,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,18,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (x *GetEventsReq) Reset() {
	*x = GetEventsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsReq) ProtoMessage() {}

func (x *GetEventsReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsReq.ProtoReflect.Descriptor instead.
func (*GetEventsReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{11}
}

func (x *GetEventsReq) GetPageInfo() *PageInfoReq {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetEventsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetEventsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetEventsReq) GetType() EventTypeEnum {
	if x != nil {
		return x.Type
	}
	return EventTypeEnum_EventTypeEnum_UNKNOWN
}

func (x *GetEventsReq) GetTopic0() string {
	if x != nil {
		return x.Topic0
	}
	return ""
}

func (x *GetEventsReq) GetTopic1() string {
	if x != nil {
		return x.Topic1
	}
	return ""
}

func (x *GetEventsReq) GetTopic2() string {
	if x != nil {
		return x.Topic2
	}
	return ""
}

func (x *GetEventsReq) GetTopic3() string {
	if x != nil {
		return x.Topic3
	}
	return ""
}

func (x *GetEventsReq) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *GetEventsReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *GetEventsReq) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *GetEventsReq) GetTransactionFrom() string {
	if x != nil {
		return x.TransactionFrom
	}
	return ""
}

func (x *GetEventsReq) GetTransactionTo() string {
	if x != nil {
		return x.TransactionTo
	}
	return ""
}

func (x *GetEventsReq) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *GetEventsReq) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetEventsReq) GetStartBlockNumber() int64 {
	if x != nil {
		return x.StartBlockNumber
	}
	return 0
}

func (x *GetEventsReq) GetEndBlockNumber() int64 {
	if x != nil {
		return x.EndBlockNumber
	}
	return 0
}

func (x *GetEventsReq) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type GetEventsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EventInfo `protobuf:"bytes,2,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *GetEventsResp) Reset() {
	*x = GetEventsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResp) ProtoMessage() {}

func (x *GetEventsResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResp.ProtoReflect.Descriptor instead.
func (*GetEventsResp) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{12}
}

func (x *GetEventsResp) GetEvents() []*EventInfo {
	if x != nil {
		return x.Events
	}
	return nil
}

// 区块确认状态.
type BlockConfirmStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 块确认次数.
	ConfirmNumbers int64 `protobuf:"varint,1,opt,name=ConfirmNumbers,proto3" json:"ConfirmNumbers,omitempty"`
	// 是否建议确认.
	SuggestConfirm bool `protobuf:"varint,2,opt,name=SuggestConfirm,proto3" json:"SuggestConfirm,omitempty"`
}

func (x *BlockConfirmStatus) Reset() {
	*x = BlockConfirmStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockConfirmStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockConfirmStatus) ProtoMessage() {}

func (x *BlockConfirmStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockConfirmStatus.ProtoReflect.Descriptor instead.
func (*BlockConfirmStatus) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{13}
}

func (x *BlockConfirmStatus) GetConfirmNumbers() int64 {
	if x != nil {
		return x.ConfirmNumbers
	}
	return 0
}

func (x *BlockConfirmStatus) GetSuggestConfirm() bool {
	if x != nil {
		return x.SuggestConfirm
	}
	return false
}

// 区块信息
type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 区块高度
	Number int64 `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	// 区块Hash
	Hash string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	// 区块状态
	Status BlockStatusEnum `protobuf:"varint,4,opt,name=Status,proto3,enum=ChainCollect.BlockStatusEnum" json:"Status,omitempty"`
	// 区块产生时间
	Time int64 `protobuf:"varint,5,opt,name=Time,proto3" json:"Time,omitempty"`
	// 矿工地址
	Miner string `protobuf:"bytes,6,opt,name=Miner,proto3" json:"Miner,omitempty"`
	// 交易数量
	TransactionNum int64 `protobuf:"varint,7,opt,name=TransactionNum,proto3" json:"TransactionNum,omitempty"`
	// 事件数量
	EventNum int64 `protobuf:"varint,8,opt,name=EventNum,proto3" json:"EventNum,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,9,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	// 区块确认状态.
	BlockConfirmStatus *BlockConfirmStatus `protobuf:"bytes,10,opt,name=BlockConfirmStatus,proto3" json:"BlockConfirmStatus,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{14}
}

func (x *BlockInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockInfo) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockInfo) GetStatus() BlockStatusEnum {
	if x != nil {
		return x.Status
	}
	return BlockStatusEnum_BlockStatusEnum_UNKNOWN
}

func (x *BlockInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BlockInfo) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *BlockInfo) GetTransactionNum() int64 {
	if x != nil {
		return x.TransactionNum
	}
	return 0
}

func (x *BlockInfo) GetEventNum() int64 {
	if x != nil {
		return x.EventNum
	}
	return 0
}

func (x *BlockInfo) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BlockInfo) GetBlockConfirmStatus() *BlockConfirmStatus {
	if x != nil {
		return x.BlockConfirmStatus
	}
	return nil
}

// 交易信息
type TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 交易hash
	Hash string `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	// 发起地址
	From string `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	// 接收地址
	To string `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
	// gas数量
	Gas string `protobuf:"bytes,5,opt,name=Gas,proto3" json:"Gas,omitempty"`
	// gas价格
	GasPrice string `protobuf:"bytes,6,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	// 交易时间
	Time int64 `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	// 交易状态：成功、失败、回滚.
	Status TransactionStatusEnum `protobuf:"varint,8,opt,name=Status,proto3,enum=ChainCollect.TransactionStatusEnum" json:"Status,omitempty"`
	// 交易类型：伦敦协议交易、普通交易.
	Type TransactionTypeEnum `protobuf:"varint,9,opt,name=Type,proto3,enum=ChainCollect.TransactionTypeEnum" json:"Type,omitempty"`
	// 交易nonce
	Nonce int64 `protobuf:"varint,10,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// 以太数量
	Value string `protobuf:"bytes,11,opt,name=Value,proto3" json:"Value,omitempty"`
	// data 用data[:4] 匹配abi函数.
	Data string `protobuf:"bytes,12,opt,name=Data,proto3" json:"Data,omitempty"`
	// 区块id
	BlockId string `protobuf:"bytes,13,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	// 区块hash
	BlockHash string `protobuf:"bytes,14,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	// 区块高度
	BlockNum int64 `protobuf:"varint,15,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,16,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	// 区块确认状态.
	BlockConfirmStatus *BlockConfirmStatus `protobuf:"bytes,17,opt,name=BlockConfirmStatus,proto3" json:"BlockConfirmStatus,omitempty"`
	// 受支持的函数, 可以进行解析.
	AbiDetail *ABIFunctionDetail `protobuf:"bytes,18,opt,name=abiDetail,proto3" json:"abiDetail,omitempty"`
	// 相关的事件.
	RelationEvents []*EventInfo `protobuf:"bytes,19,rep,name=relationEvents,proto3" json:"relationEvents,omitempty"`
	// 受支持的error, 可以进行解析.
	ErrorAbiDetail *ABIErrorDetail `protobuf:"bytes,20,opt,name=errorAbiDetail,proto3" json:"errorAbiDetail,omitempty"`
}

func (x *TransactionInfo) Reset() {
	*x = TransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo) ProtoMessage() {}

func (x *TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo.ProtoReflect.Descriptor instead.
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TransactionInfo) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransactionInfo) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransactionInfo) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *TransactionInfo) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TransactionInfo) GetStatus() TransactionStatusEnum {
	if x != nil {
		return x.Status
	}
	return TransactionStatusEnum_TransactionStatusEnum__UNKNOWN
}

func (x *TransactionInfo) GetType() TransactionTypeEnum {
	if x != nil {
		return x.Type
	}
	return TransactionTypeEnum_TransactionTypeEnum_UNKNOWN
}

func (x *TransactionInfo) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TransactionInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TransactionInfo) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *TransactionInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TransactionInfo) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *TransactionInfo) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TransactionInfo) GetBlockConfirmStatus() *BlockConfirmStatus {
	if x != nil {
		return x.BlockConfirmStatus
	}
	return nil
}

func (x *TransactionInfo) GetAbiDetail() *ABIFunctionDetail {
	if x != nil {
		return x.AbiDetail
	}
	return nil
}

func (x *TransactionInfo) GetRelationEvents() []*EventInfo {
	if x != nil {
		return x.RelationEvents
	}
	return nil
}

func (x *TransactionInfo) GetErrorAbiDetail() *ABIErrorDetail {
	if x != nil {
		return x.ErrorAbiDetail
	}
	return nil
}

// 事件信息
type EventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 事件类型：自生成事件、链上事件.
	Type EventTypeEnum `protobuf:"varint,2,opt,name=Type,proto3,enum=ChainCollect.EventTypeEnum" json:"Type,omitempty"`
	// event时间
	Time int64 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
	// topic(对应事件的函数签名的hash及参数等).
	Topic0 string `protobuf:"bytes,4,opt,name=Topic0,proto3" json:"Topic0,omitempty"`
	Topic1 string `protobuf:"bytes,5,opt,name=Topic1,proto3" json:"Topic1,omitempty"`
	Topic2 string `protobuf:"bytes,6,opt,name=Topic2,proto3" json:"Topic2,omitempty"`
	Topic3 string `protobuf:"bytes,7,opt,name=Topic3,proto3" json:"Topic3,omitempty"`
	// index
	Index string `protobuf:"bytes,8,opt,name=Index,proto3" json:"Index,omitempty"`
	// 状态
	Status   EventStatusEnum `protobuf:"varint,9,opt,name=Status,proto3,enum=ChainCollect.EventStatusEnum" json:"Status,omitempty"`
	Contract string          `protobuf:"bytes,10,opt,name=Contract,proto3" json:"Contract,omitempty"`
	// 事件data
	Data string `protobuf:"bytes,11,opt,name=Data,proto3" json:"Data,omitempty"`
	// 区块id
	BlockId string `protobuf:"bytes,12,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	// 区块hash
	BlockHash string `protobuf:"bytes,13,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	// 区块高度
	BlockNum int64 `protobuf:"varint,14,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
	// 交易id
	TransactionId string `protobuf:"bytes,15,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	// 交易hash
	TransactionHash string `protobuf:"bytes,16,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	// 发起地址
	TransactionFrom string `protobuf:"bytes,17,opt,name=TransactionFrom,proto3" json:"TransactionFrom,omitempty"`
	// 交易接收地址(合约地址\接收人地址).
	TransactionTo string `protobuf:"bytes,18,opt,name=TransactionTo,proto3" json:"TransactionTo,omitempty"`
	// 不同 EVM 链的一个标识.
	ChainId int64 `protobuf:"varint,19,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	// 区块确认状态.
	BlockConfirmStatus *BlockConfirmStatus `protobuf:"bytes,20,opt,name=BlockConfirmStatus,proto3" json:"BlockConfirmStatus,omitempty"`
	// 受支持的事件, 可以进行解析.
	AbiDetail *ABIEventDetail `protobuf:"bytes,21,opt,name=abiDetail,proto3" json:"abiDetail,omitempty"`
	// 相关的事件.
	RelationEvents []*EventInfo `protobuf:"bytes,22,rep,name=relationEvents,proto3" json:"relationEvents,omitempty"`
	// 相关的交易.
	RelationTransaction *TransactionInfo `protobuf:"bytes,23,opt,name=relationTransaction,proto3" json:"relationTransaction,omitempty"`
	// tag
	Tags []string `protobuf:"bytes,24,rep,name=Tags,proto3" json:"Tags,omitempty"`
	// 上一次出现这个事件的区块hash
	LastBlockHash string `protobuf:"bytes,25,opt,name=LastBlockHash,proto3" json:"LastBlockHash,omitempty"`
}

func (x *EventInfo) Reset() {
	*x = EventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInfo) ProtoMessage() {}

func (x *EventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInfo.ProtoReflect.Descriptor instead.
func (*EventInfo) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{16}
}

func (x *EventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventInfo) GetType() EventTypeEnum {
	if x != nil {
		return x.Type
	}
	return EventTypeEnum_EventTypeEnum_UNKNOWN
}

func (x *EventInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *EventInfo) GetTopic0() string {
	if x != nil {
		return x.Topic0
	}
	return ""
}

func (x *EventInfo) GetTopic1() string {
	if x != nil {
		return x.Topic1
	}
	return ""
}

func (x *EventInfo) GetTopic2() string {
	if x != nil {
		return x.Topic2
	}
	return ""
}

func (x *EventInfo) GetTopic3() string {
	if x != nil {
		return x.Topic3
	}
	return ""
}

func (x *EventInfo) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *EventInfo) GetStatus() EventStatusEnum {
	if x != nil {
		return x.Status
	}
	return EventStatusEnum_EventStatusEnum_UNKNOWN
}

func (x *EventInfo) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *EventInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EventInfo) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *EventInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EventInfo) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *EventInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EventInfo) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EventInfo) GetTransactionFrom() string {
	if x != nil {
		return x.TransactionFrom
	}
	return ""
}

func (x *EventInfo) GetTransactionTo() string {
	if x != nil {
		return x.TransactionTo
	}
	return ""
}

func (x *EventInfo) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EventInfo) GetBlockConfirmStatus() *BlockConfirmStatus {
	if x != nil {
		return x.BlockConfirmStatus
	}
	return nil
}

func (x *EventInfo) GetAbiDetail() *ABIEventDetail {
	if x != nil {
		return x.AbiDetail
	}
	return nil
}

func (x *EventInfo) GetRelationEvents() []*EventInfo {
	if x != nil {
		return x.RelationEvents
	}
	return nil
}

func (x *EventInfo) GetRelationTransaction() *TransactionInfo {
	if x != nil {
		return x.RelationTransaction
	}
	return nil
}

func (x *EventInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventInfo) GetLastBlockHash() string {
	if x != nil {
		return x.LastBlockHash
	}
	return ""
}

type ABIFunctionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Inputs  []*ABIParam `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []*ABIParam `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ABIFunctionDetail) Reset() {
	*x = ABIFunctionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIFunctionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIFunctionDetail) ProtoMessage() {}

func (x *ABIFunctionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIFunctionDetail.ProtoReflect.Descriptor instead.
func (*ABIFunctionDetail) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{17}
}

func (x *ABIFunctionDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ABIFunctionDetail) GetInputs() []*ABIParam {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ABIFunctionDetail) GetOutputs() []*ABIParam {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ABIEventDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params []*ABIParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ABIEventDetail) Reset() {
	*x = ABIEventDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIEventDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIEventDetail) ProtoMessage() {}

func (x *ABIEventDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIEventDetail.ProtoReflect.Descriptor instead.
func (*ABIEventDetail) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{18}
}

func (x *ABIEventDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ABIEventDetail) GetParams() []*ABIParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type ABIErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Inputs []*ABIParam `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *ABIErrorDetail) Reset() {
	*x = ABIErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIErrorDetail) ProtoMessage() {}

func (x *ABIErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIErrorDetail.ProtoReflect.Descriptor instead.
func (*ABIErrorDetail) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{19}
}

func (x *ABIErrorDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ABIErrorDetail) GetInputs() []*ABIParam {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type ABIParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字段名.
	// 匿名结构为空.
	FieldName string `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	// abi中的类型名.
	// 匿名结构体直接使用原始类型字段.
	TypeName string `protobuf:"bytes,2,opt,name=typeName,proto3" json:"typeName,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ABIParam_BaseValue
	//	*ABIParam_BaseValues
	//	*ABIParam_StructValue
	//	*ABIParam_StructValues
	//	*ABIParam_BytesDecodeValue
	Value isABIParam_Value `protobuf_oneof:"value"`
}

func (x *ABIParam) Reset() {
	*x = ABIParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIParam) ProtoMessage() {}

func (x *ABIParam) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIParam.ProtoReflect.Descriptor instead.
func (*ABIParam) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{20}
}

func (x *ABIParam) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ABIParam) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (m *ABIParam) GetValue() isABIParam_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ABIParam) GetBaseValue() *ABIBaseValue {
	if x, ok := x.GetValue().(*ABIParam_BaseValue); ok {
		return x.BaseValue
	}
	return nil
}

func (x *ABIParam) GetBaseValues() *ABIArrayBaseValue {
	if x, ok := x.GetValue().(*ABIParam_BaseValues); ok {
		return x.BaseValues
	}
	return nil
}

func (x *ABIParam) GetStructValue() *ABIStructValue {
	if x, ok := x.GetValue().(*ABIParam_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (x *ABIParam) GetStructValues() *ABIArrayStructValue {
	if x, ok := x.GetValue().(*ABIParam_StructValues); ok {
		return x.StructValues
	}
	return nil
}

func (x *ABIParam) GetBytesDecodeValue() *ABIBytesDecodeValue {
	if x, ok := x.GetValue().(*ABIParam_BytesDecodeValue); ok {
		return x.BytesDecodeValue
	}
	return nil
}

type isABIParam_Value interface {
	isABIParam_Value()
}

type ABIParam_BaseValue struct {
	BaseValue *ABIBaseValue `protobuf:"bytes,3,opt,name=baseValue,proto3,oneof"`
}

type ABIParam_BaseValues struct {
	BaseValues *ABIArrayBaseValue `protobuf:"bytes,4,opt,name=baseValues,proto3,oneof"`
}

type ABIParam_StructValue struct {
	StructValue *ABIStructValue `protobuf:"bytes,5,opt,name=structValue,proto3,oneof"`
}

type ABIParam_StructValues struct {
	StructValues *ABIArrayStructValue `protobuf:"bytes,6,opt,name=structValues,proto3,oneof"`
}

type ABIParam_BytesDecodeValue struct {
	BytesDecodeValue *ABIBytesDecodeValue `protobuf:"bytes,7,opt,name=bytesDecodeValue,proto3,oneof"`
}

func (*ABIParam_BaseValue) isABIParam_Value() {}

func (*ABIParam_BaseValues) isABIParam_Value() {}

func (*ABIParam_StructValue) isABIParam_Value() {}

func (*ABIParam_StructValues) isABIParam_Value() {}

func (*ABIParam_BytesDecodeValue) isABIParam_Value() {}

// 内建的数据类型, 包含uint, address, bytes(16进制表示)等, 不包含array.
type ABIBaseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BaseValue:
	//
	//	*ABIBaseValue_UintX
	//	*ABIBaseValue_Address
	//	*ABIBaseValue_BytesX
	//	*ABIBaseValue_StringX
	//	*ABIBaseValue_Hash
	BaseValue isABIBaseValue_BaseValue `protobuf_oneof:"baseValue"`
}

func (x *ABIBaseValue) Reset() {
	*x = ABIBaseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIBaseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIBaseValue) ProtoMessage() {}

func (x *ABIBaseValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIBaseValue.ProtoReflect.Descriptor instead.
func (*ABIBaseValue) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{21}
}

func (m *ABIBaseValue) GetBaseValue() isABIBaseValue_BaseValue {
	if m != nil {
		return m.BaseValue
	}
	return nil
}

func (x *ABIBaseValue) GetUintX() string {
	if x, ok := x.GetBaseValue().(*ABIBaseValue_UintX); ok {
		return x.UintX
	}
	return ""
}

func (x *ABIBaseValue) GetAddress() string {
	if x, ok := x.GetBaseValue().(*ABIBaseValue_Address); ok {
		return x.Address
	}
	return ""
}

func (x *ABIBaseValue) GetBytesX() string {
	if x, ok := x.GetBaseValue().(*ABIBaseValue_BytesX); ok {
		return x.BytesX
	}
	return ""
}

func (x *ABIBaseValue) GetStringX() string {
	if x, ok := x.GetBaseValue().(*ABIBaseValue_StringX); ok {
		return x.StringX
	}
	return ""
}

func (x *ABIBaseValue) GetHash() string {
	if x, ok := x.GetBaseValue().(*ABIBaseValue_Hash); ok {
		return x.Hash
	}
	return ""
}

type isABIBaseValue_BaseValue interface {
	isABIBaseValue_BaseValue()
}

type ABIBaseValue_UintX struct {
	UintX string `protobuf:"bytes,1,opt,name=uintX,proto3,oneof"`
}

type ABIBaseValue_Address struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type ABIBaseValue_BytesX struct {
	BytesX string `protobuf:"bytes,3,opt,name=bytesX,proto3,oneof"`
}

type ABIBaseValue_StringX struct {
	StringX string `protobuf:"bytes,4,opt,name=stringX,proto3,oneof"`
}

type ABIBaseValue_Hash struct {
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3,oneof"`
}

func (*ABIBaseValue_UintX) isABIBaseValue_BaseValue() {}

func (*ABIBaseValue_Address) isABIBaseValue_BaseValue() {}

func (*ABIBaseValue_BytesX) isABIBaseValue_BaseValue() {}

func (*ABIBaseValue_StringX) isABIBaseValue_BaseValue() {}

func (*ABIBaseValue_Hash) isABIBaseValue_BaseValue() {}

// 内建数据类型的(多维)数组格式.
type ABIArrayBaseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ABIParam `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ABIArrayBaseValue) Reset() {
	*x = ABIArrayBaseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIArrayBaseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIArrayBaseValue) ProtoMessage() {}

func (x *ABIArrayBaseValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIArrayBaseValue.ProtoReflect.Descriptor instead.
func (*ABIArrayBaseValue) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{22}
}

func (x *ABIArrayBaseValue) GetValues() []*ABIParam {
	if x != nil {
		return x.Values
	}
	return nil
}

// 结构体参数.
type ABIStructValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructValue []*ABIParam `protobuf:"bytes,1,rep,name=structValue,proto3" json:"structValue,omitempty"`
}

func (x *ABIStructValue) Reset() {
	*x = ABIStructValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIStructValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIStructValue) ProtoMessage() {}

func (x *ABIStructValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIStructValue.ProtoReflect.Descriptor instead.
func (*ABIStructValue) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{23}
}

func (x *ABIStructValue) GetStructValue() []*ABIParam {
	if x != nil {
		return x.StructValue
	}
	return nil
}

// 结构体(暂不考虑多维)数组参数.
type ABIArrayStructValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructValues []*ABIStructValue `protobuf:"bytes,1,rep,name=structValues,proto3" json:"structValues,omitempty"`
}

func (x *ABIArrayStructValue) Reset() {
	*x = ABIArrayStructValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIArrayStructValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIArrayStructValue) ProtoMessage() {}

func (x *ABIArrayStructValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIArrayStructValue.ProtoReflect.Descriptor instead.
func (*ABIArrayStructValue) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{24}
}

func (x *ABIArrayStructValue) GetStructValues() []*ABIStructValue {
	if x != nil {
		return x.StructValues
	}
	return nil
}

type ABIBytesDecodeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesX []byte `protobuf:"bytes,1,opt,name=bytesX,proto3" json:"bytesX,omitempty"`
	// Types that are assignable to DecodeValue:
	//
	//	*ABIBytesDecodeValue_Function
	//	*ABIBytesDecodeValue_Param
	DecodeValue isABIBytesDecodeValue_DecodeValue `protobuf_oneof:"decodeValue"`
}

func (x *ABIBytesDecodeValue) Reset() {
	*x = ABIBytesDecodeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIBytesDecodeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIBytesDecodeValue) ProtoMessage() {}

func (x *ABIBytesDecodeValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIBytesDecodeValue.ProtoReflect.Descriptor instead.
func (*ABIBytesDecodeValue) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{25}
}

func (x *ABIBytesDecodeValue) GetBytesX() []byte {
	if x != nil {
		return x.BytesX
	}
	return nil
}

func (m *ABIBytesDecodeValue) GetDecodeValue() isABIBytesDecodeValue_DecodeValue {
	if m != nil {
		return m.DecodeValue
	}
	return nil
}

func (x *ABIBytesDecodeValue) GetFunction() *ABIFunctionDetail {
	if x, ok := x.GetDecodeValue().(*ABIBytesDecodeValue_Function); ok {
		return x.Function
	}
	return nil
}

func (x *ABIBytesDecodeValue) GetParam() *ABIParam {
	if x, ok := x.GetDecodeValue().(*ABIBytesDecodeValue_Param); ok {
		return x.Param
	}
	return nil
}

type isABIBytesDecodeValue_DecodeValue interface {
	isABIBytesDecodeValue_DecodeValue()
}

type ABIBytesDecodeValue_Function struct {
	// 函数打包.
	Function *ABIFunctionDetail `protobuf:"bytes,2,opt,name=function,proto3,oneof"`
}

type ABIBytesDecodeValue_Param struct {
	// 结构体方式打包, 其中的fieldName为空.
	Param *ABIParam `protobuf:"bytes,3,opt,name=param,proto3,oneof"`
}

func (*ABIBytesDecodeValue_Function) isABIBytesDecodeValue_DecodeValue() {}

func (*ABIBytesDecodeValue_Param) isABIBytesDecodeValue_DecodeValue() {}

// 分页参数
type PageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 页码
	Page int64 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	// 页数量
	PerPage int64 `protobuf:"varint,2,opt,name=PerPage,proto3" json:"PerPage,omitempty"`
	// 下一页时, 传递当前页最后一条.
	LastID string `protobuf:"bytes,3,opt,name=LastID,proto3" json:"LastID,omitempty"`
	// 上一页时, 传递当前页第一条.
	NextID string `protobuf:"bytes,4,opt,name=NextID,proto3" json:"NextID,omitempty"`
}

func (x *PageInfoReq) Reset() {
	*x = PageInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoReq) ProtoMessage() {}

func (x *PageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pbfile_ChainCollect_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoReq.ProtoReflect.Descriptor instead.
func (*PageInfoReq) Descriptor() ([]byte, []int) {
	return file_v1_pbfile_ChainCollect_proto_rawDescGZIP(), []int{26}
}

func (x *PageInfoReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfoReq) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *PageInfoReq) GetLastID() string {
	if x != nil {
		return x.LastID
	}
	return ""
}

func (x *PageInfoReq) GetNextID() string {
	if x != nil {
		return x.NextID
	}
	return ""
}

var file_v1_pbfile_ChainCollect_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "ChainCollect.car_name",
		Tag:           "bytes,50001,opt,name=car_name",
		Filename:      "v1/pbfile/ChainCollect.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional string car_name = 50001;
	E_CarName = &file_v1_pbfile_ChainCollect_proto_extTypes[0] // Be sure to read the docs about choosing the number here.
)

var File_v1_pbfile_ChainCollect_proto protoreflect.FileDescriptor

var file_v1_pbfile_ChainCollect_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xf9, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4f, 0x0a, 0x11, 0x41, 0x42, 0x49, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x41, 0x42, 0x49, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x41, 0x42, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x41, 0x42, 0x49, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x41, 0x42,
	0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x42, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x48, 0x00, 0x52, 0x0e, 0x41, 0x42, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x62, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x62,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x07, 0x0a, 0x05,
	0x4e, 0x6f, 0x52, 0x65, 0x71, 0x22, 0xa4, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xeb,
	0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf0, 0x04, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x30, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x12, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x22, 0xd8, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd5, 0x05, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x09, 0x61, 0x62, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x41, 0x42, 0x49, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x09, 0x61, 0x62, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x62, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x62, 0x69, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xa5, 0x07, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x30, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x61, 0x62, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x89, 0x01, 0x0a,
	0x11, 0x41, 0x42, 0x49, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x41, 0x42, 0x49, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x54,
	0x0a, 0x0e, 0x41, 0x42, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x08, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42,
	0x49, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41,
	0x42, 0x49, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x42, 0x49, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41,
	0x42, 0x49, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x0c, 0x41, 0x42, 0x49, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x58, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x58, 0x12, 0x1a,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x58, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a,
	0x11, 0x41, 0x42, 0x49, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x41, 0x42, 0x49, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57,
	0x0a, 0x13, 0x41, 0x42, 0x49, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x41, 0x42, 0x49, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x58, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x50, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x65, 0x78, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x2a, 0x6d, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x5f, 0x4b, 0x65, 0x79, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x02, 0x2a, 0x68, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x2a, 0x68, 0x0a,
	0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x4c, 0x6f, 0x6e, 0x64,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x5f, 0x53, 0x65, 0x6c, 0x66, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x02, 0x32, 0xf0, 0x05, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x62, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x68, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x62, 0x69, 0x12, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x62, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x62, 0x69, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x50, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x3a, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x34, 0x5a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x92, 0x41, 0x1d, 0x12, 0x17, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x70, 0x69, 0x32, 0x03,
	0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_pbfile_ChainCollect_proto_rawDescOnce sync.Once
	file_v1_pbfile_ChainCollect_proto_rawDescData = file_v1_pbfile_ChainCollect_proto_rawDesc
)

func file_v1_pbfile_ChainCollect_proto_rawDescGZIP() []byte {
	file_v1_pbfile_ChainCollect_proto_rawDescOnce.Do(func() {
		file_v1_pbfile_ChainCollect_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_pbfile_ChainCollect_proto_rawDescData)
	})
	return file_v1_pbfile_ChainCollect_proto_rawDescData
}

var file_v1_pbfile_ChainCollect_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_v1_pbfile_ChainCollect_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_v1_pbfile_ChainCollect_proto_goTypes = []interface{}{
	(ParseDataTypeEnum)(0),                // 0: ChainCollect.ParseDataTypeEnum
	(FilterSetStatusEnum)(0),              // 1: ChainCollect.FilterSetStatusEnum
	(BlockStatusEnum)(0),                  // 2: ChainCollect.BlockStatusEnum
	(EventStatusEnum)(0),                  // 3: ChainCollect.EventStatusEnum
	(TransactionStatusEnum)(0),            // 4: ChainCollect.TransactionStatusEnum
	(TransactionTypeEnum)(0),              // 5: ChainCollect.TransactionTypeEnum
	(EventTypeEnum)(0),                    // 6: ChainCollect.EventTypeEnum
	(*ParseDataReq)(nil),                  // 7: ChainCollect.ParseDataReq
	(*ParseDataResp)(nil),                 // 8: ChainCollect.ParseDataResp
	(*StorageAbiReq)(nil),                 // 9: ChainCollect.StorageAbiReq
	(*FilterSetReq)(nil),                  // 10: ChainCollect.FilterSetReq
	(*FilterSetResp)(nil),                 // 11: ChainCollect.FilterSetResp
	(*NoResp)(nil),                        // 12: ChainCollect.NoResp
	(*NoReq)(nil),                         // 13: ChainCollect.NoReq
	(*GetBlocksReq)(nil),                  // 14: ChainCollect.GetBlocksReq
	(*GetBlocksResp)(nil),                 // 15: ChainCollect.GetBlocksResp
	(*GetTransactionsReq)(nil),            // 16: ChainCollect.GetTransactionsReq
	(*GetTransactionsResp)(nil),           // 17: ChainCollect.GetTransactionsResp
	(*GetEventsReq)(nil),                  // 18: ChainCollect.GetEventsReq
	(*GetEventsResp)(nil),                 // 19: ChainCollect.GetEventsResp
	(*BlockConfirmStatus)(nil),            // 20: ChainCollect.BlockConfirmStatus
	(*BlockInfo)(nil),                     // 21: ChainCollect.BlockInfo
	(*TransactionInfo)(nil),               // 22: ChainCollect.TransactionInfo
	(*EventInfo)(nil),                     // 23: ChainCollect.EventInfo
	(*ABIFunctionDetail)(nil),             // 24: ChainCollect.ABIFunctionDetail
	(*ABIEventDetail)(nil),                // 25: ChainCollect.ABIEventDetail
	(*ABIErrorDetail)(nil),                // 26: ChainCollect.ABIErrorDetail
	(*ABIParam)(nil),                      // 27: ChainCollect.ABIParam
	(*ABIBaseValue)(nil),                  // 28: ChainCollect.ABIBaseValue
	(*ABIArrayBaseValue)(nil),             // 29: ChainCollect.ABIArrayBaseValue
	(*ABIStructValue)(nil),                // 30: ChainCollect.ABIStructValue
	(*ABIArrayStructValue)(nil),           // 31: ChainCollect.ABIArrayStructValue
	(*ABIBytesDecodeValue)(nil),           // 32: ChainCollect.ABIBytesDecodeValue
	(*PageInfoReq)(nil),                   // 33: ChainCollect.PageInfoReq
	(*descriptorpb.EnumValueOptions)(nil), // 34: google.protobuf.EnumValueOptions
}
var file_v1_pbfile_ChainCollect_proto_depIdxs = []int32{
	0,  // 0: ChainCollect.ParseDataReq.Type:type_name -> ChainCollect.ParseDataTypeEnum
	24, // 1: ChainCollect.ParseDataResp.ABIFunctionDetail:type_name -> ChainCollect.ABIFunctionDetail
	25, // 2: ChainCollect.ParseDataResp.ABIEventDetail:type_name -> ChainCollect.ABIEventDetail
	26, // 3: ChainCollect.ParseDataResp.ABIErrorDetail:type_name -> ChainCollect.ABIErrorDetail
	1,  // 4: ChainCollect.FilterSetResp.status:type_name -> ChainCollect.FilterSetStatusEnum
	33, // 5: ChainCollect.GetBlocksReq.PageInfo:type_name -> ChainCollect.PageInfoReq
	2,  // 6: ChainCollect.GetBlocksReq.Status:type_name -> ChainCollect.BlockStatusEnum
	21, // 7: ChainCollect.GetBlocksResp.Blocks:type_name -> ChainCollect.BlockInfo
	33, // 8: ChainCollect.GetTransactionsReq.PageInfo:type_name -> ChainCollect.PageInfoReq
	4,  // 9: ChainCollect.GetTransactionsReq.Status:type_name -> ChainCollect.TransactionStatusEnum
	5,  // 10: ChainCollect.GetTransactionsReq.Type:type_name -> ChainCollect.TransactionTypeEnum
	22, // 11: ChainCollect.GetTransactionsResp.Transactions:type_name -> ChainCollect.TransactionInfo
	33, // 12: ChainCollect.GetEventsReq.PageInfo:type_name -> ChainCollect.PageInfoReq
	6,  // 13: ChainCollect.GetEventsReq.Type:type_name -> ChainCollect.EventTypeEnum
	23, // 14: ChainCollect.GetEventsResp.Events:type_name -> ChainCollect.EventInfo
	2,  // 15: ChainCollect.BlockInfo.Status:type_name -> ChainCollect.BlockStatusEnum
	20, // 16: ChainCollect.BlockInfo.BlockConfirmStatus:type_name -> ChainCollect.BlockConfirmStatus
	4,  // 17: ChainCollect.TransactionInfo.Status:type_name -> ChainCollect.TransactionStatusEnum
	5,  // 18: ChainCollect.TransactionInfo.Type:type_name -> ChainCollect.TransactionTypeEnum
	20, // 19: ChainCollect.TransactionInfo.BlockConfirmStatus:type_name -> ChainCollect.BlockConfirmStatus
	24, // 20: ChainCollect.TransactionInfo.abiDetail:type_name -> ChainCollect.ABIFunctionDetail
	23, // 21: ChainCollect.TransactionInfo.relationEvents:type_name -> ChainCollect.EventInfo
	26, // 22: ChainCollect.TransactionInfo.errorAbiDetail:type_name -> ChainCollect.ABIErrorDetail
	6,  // 23: ChainCollect.EventInfo.Type:type_name -> ChainCollect.EventTypeEnum
	3,  // 24: ChainCollect.EventInfo.Status:type_name -> ChainCollect.EventStatusEnum
	20, // 25: ChainCollect.EventInfo.BlockConfirmStatus:type_name -> ChainCollect.BlockConfirmStatus
	25, // 26: ChainCollect.EventInfo.abiDetail:type_name -> ChainCollect.ABIEventDetail
	23, // 27: ChainCollect.EventInfo.relationEvents:type_name -> ChainCollect.EventInfo
	22, // 28: ChainCollect.EventInfo.relationTransaction:type_name -> ChainCollect.TransactionInfo
	27, // 29: ChainCollect.ABIFunctionDetail.inputs:type_name -> ChainCollect.ABIParam
	27, // 30: ChainCollect.ABIFunctionDetail.outputs:type_name -> ChainCollect.ABIParam
	27, // 31: ChainCollect.ABIEventDetail.params:type_name -> ChainCollect.ABIParam
	27, // 32: ChainCollect.ABIErrorDetail.inputs:type_name -> ChainCollect.ABIParam
	28, // 33: ChainCollect.ABIParam.baseValue:type_name -> ChainCollect.ABIBaseValue
	29, // 34: ChainCollect.ABIParam.baseValues:type_name -> ChainCollect.ABIArrayBaseValue
	30, // 35: ChainCollect.ABIParam.structValue:type_name -> ChainCollect.ABIStructValue
	31, // 36: ChainCollect.ABIParam.structValues:type_name -> ChainCollect.ABIArrayStructValue
	32, // 37: ChainCollect.ABIParam.bytesDecodeValue:type_name -> ChainCollect.ABIBytesDecodeValue
	27, // 38: ChainCollect.ABIArrayBaseValue.values:type_name -> ChainCollect.ABIParam
	27, // 39: ChainCollect.ABIStructValue.structValue:type_name -> ChainCollect.ABIParam
	30, // 40: ChainCollect.ABIArrayStructValue.structValues:type_name -> ChainCollect.ABIStructValue
	24, // 41: ChainCollect.ABIBytesDecodeValue.function:type_name -> ChainCollect.ABIFunctionDetail
	27, // 42: ChainCollect.ABIBytesDecodeValue.param:type_name -> ChainCollect.ABIParam
	34, // 43: ChainCollect.car_name:extendee -> google.protobuf.EnumValueOptions
	14, // 44: ChainCollect.ChainCollect.GetBlocks:input_type -> ChainCollect.GetBlocksReq
	16, // 45: ChainCollect.ChainCollect.GetTransactions:input_type -> ChainCollect.GetTransactionsReq
	18, // 46: ChainCollect.ChainCollect.GetEvents:input_type -> ChainCollect.GetEventsReq
	10, // 47: ChainCollect.ChainCollect.AddFilterSet:input_type -> ChainCollect.FilterSetReq
	10, // 48: ChainCollect.ChainCollect.DeleteFilterSet:input_type -> ChainCollect.FilterSetReq
	9,  // 49: ChainCollect.ChainCollect.StorageAbi:input_type -> ChainCollect.StorageAbiReq
	7,  // 50: ChainCollect.ChainCollect.ParseData:input_type -> ChainCollect.ParseDataReq
	15, // 51: ChainCollect.ChainCollect.GetBlocks:output_type -> ChainCollect.GetBlocksResp
	17, // 52: ChainCollect.ChainCollect.GetTransactions:output_type -> ChainCollect.GetTransactionsResp
	19, // 53: ChainCollect.ChainCollect.GetEvents:output_type -> ChainCollect.GetEventsResp
	11, // 54: ChainCollect.ChainCollect.AddFilterSet:output_type -> ChainCollect.FilterSetResp
	11, // 55: ChainCollect.ChainCollect.DeleteFilterSet:output_type -> ChainCollect.FilterSetResp
	12, // 56: ChainCollect.ChainCollect.StorageAbi:output_type -> ChainCollect.NoResp
	8,  // 57: ChainCollect.ChainCollect.ParseData:output_type -> ChainCollect.ParseDataResp
	51, // [51:58] is the sub-list for method output_type
	44, // [44:51] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	43, // [43:44] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_v1_pbfile_ChainCollect_proto_init() }
func file_v1_pbfile_ChainCollect_proto_init() {
	if File_v1_pbfile_ChainCollect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_pbfile_ChainCollect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageAbiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockConfirmStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIFunctionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIEventDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIBaseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIArrayBaseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIStructValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIArrayStructValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABIBytesDecodeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_pbfile_ChainCollect_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_pbfile_ChainCollect_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ParseDataResp_ABIFunctionDetail)(nil),
		(*ParseDataResp_ABIEventDetail)(nil),
		(*ParseDataResp_ABIErrorDetail)(nil),
	}
	file_v1_pbfile_ChainCollect_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ABIParam_BaseValue)(nil),
		(*ABIParam_BaseValues)(nil),
		(*ABIParam_StructValue)(nil),
		(*ABIParam_StructValues)(nil),
		(*ABIParam_BytesDecodeValue)(nil),
	}
	file_v1_pbfile_ChainCollect_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ABIBaseValue_UintX)(nil),
		(*ABIBaseValue_Address)(nil),
		(*ABIBaseValue_BytesX)(nil),
		(*ABIBaseValue_StringX)(nil),
		(*ABIBaseValue_Hash)(nil),
	}
	file_v1_pbfile_ChainCollect_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ABIBytesDecodeValue_Function)(nil),
		(*ABIBytesDecodeValue_Param)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_pbfile_ChainCollect_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   27,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_v1_pbfile_ChainCollect_proto_goTypes,
		DependencyIndexes: file_v1_pbfile_ChainCollect_proto_depIdxs,
		EnumInfos:         file_v1_pbfile_ChainCollect_proto_enumTypes,
		MessageInfos:      file_v1_pbfile_ChainCollect_proto_msgTypes,
		ExtensionInfos:    file_v1_pbfile_ChainCollect_proto_extTypes,
	}.Build()
	File_v1_pbfile_ChainCollect_proto = out.File
	file_v1_pbfile_ChainCollect_proto_rawDesc = nil
	file_v1_pbfile_ChainCollect_proto_goTypes = nil
	file_v1_pbfile_ChainCollect_proto_depIdxs = nil
}
